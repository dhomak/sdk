package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"
	"strings"

	"github.com/foliagecp/easyjson"
	"github.com/foliagecp/sdk/embedded/graph/crud"
	"github.com/foliagecp/sdk/embedded/graph/graphql/extra"
	"github.com/foliagecp/sdk/embedded/graph/graphql/graph/model"
)

// SearchObjects is the resolver for the searchObjects field.
func (r *queryResolver) SearchObjects(ctx context.Context, query string, requestFields []string) ([]*model.Object, error) {
	result := []*model.Object{}

	if DBC != nil {
		objectIds, err := DBC.Query.JPGQLCtraQuery(crud.BUILT_IN_OBJECTS, fmt.Sprintf(".*[type('%s')]", crud.OBJECT_TYPELINK))
		if err != nil {
			return result, err
		}

		typeSearchFields := map[string][]string{}

		for _, objId := range objectIds {
			data, err := DBC.CMDB.ObjectRead(objId)
			if err == nil {
				otype := data.GetByPath("type").AsStringDefault("")
				if len(otype) > 0 {
					if _, ok := typeSearchFields[otype]; !ok {
						fieldsList := []string{}
						data, err := DBC.CMDB.TypeRead(otype)
						if err == nil {
							if fl, ok := data.GetByPath("body.search_fields").AsArrayString(); ok {
								fieldsList = fl
							}
						}
						typeSearchFields[otype] = fieldsList
					}

					body := data.GetByPath("body")
					objectSatisfiesSearch := false
					for _, k := range body.ObjectKeys() {
						f := body.GetByPath(k)
						if f.IsString() {
							if strings.Contains(strings.ToLower(f.AsStringDefault("")), strings.ToLower(query)) {
								objectSatisfiesSearch = true
								break
							}
						}
					}
					if objectSatisfiesSearch {
						resObject := model.Object{ID: objId, Type: otype, RequestFields: extra.JSON{}}
						for _, f := range requestFields {
							if body.PathExists(f) {
								resObject.RequestFields[f] = body.GetByPath(f)
							} else {
								resObject.RequestFields[f] = easyjson.NewJSONObject()
							}
						}
						result = append(result, &resObject)
					}
				}

			}
		}
	}

	return result, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
